package modmaker.gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.JToolBar;
import javax.swing.SpringLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import modmaker.Mod;
import modmaker.Start;

public class DialogModInfoGui extends JDialog{
	private static final long serialVersionUID = 1L;
	public boolean isthisOpen;
	public String name = Start.main.mod.name;
	public String info = Start.main.mod.info;
	public String by = Start.main.mod.by;
	public boolean exportSource = Start.main.mod.exportSource;
	public boolean replace;
	public void popUpthis(String title){
		this.popUpthis(title, true);
	}
	public void popUpthis(String title, boolean replace){
		this.replace = replace;
		this.isthisOpen = true;
		SpringLayout layout = new SpringLayout();
		this.setLayout(layout);
		this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		if(replace){
			Start.gui.modInfo.name = "";
			Start.gui.modInfo.info = "";
			Start.gui.modInfo.by = "";
			Start.gui.modInfo.exportSource = false;
		}
		else{
			name = Start.main.mod.name;
			info = Start.main.mod.info;
			by = Start.main.mod.by;
			exportSource = Start.main.mod.exportSource;
		}
		JToolBar modName = this.generateTextBarWithLable(name, "Mod Name:", 20, 1);
		this.add(modName);
		JToolBar description = this.generateTextBarWithLable(info, "Description:", 20, 2);
		layout.putConstraint(SpringLayout.NORTH, description,20,SpringLayout.SOUTH, modName);
		this.add(description);
		JToolBar yourName = this.generateTextBarWithLable(by, "Author's Name:", 20, 3);
		layout.putConstraint(SpringLayout.NORTH, yourName,20,SpringLayout.SOUTH, description);
		this.add(yourName);
		JButton doneButton = new JButton("Done");
		this.add(doneButton);
		doneButton.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent arg0) {
				if(Start.gui.modInfo.replace){
					Start.main.mod = new Mod(Start.gui.modInfo.name, Start.gui.modInfo.info, Start.gui.modInfo.by, Start.gui.modInfo.exportSource);
					int k = Start.gui.items.getRowCount();
					for(int i = 0; i < k; i++){
						Start.gui.items.removeRow(k-i-1);
					}
				}
				else{
					Start.main.mod.by = Start.gui.modInfo.by;
					Start.main.mod.exportSource = Start.gui.modInfo.exportSource;
					Start.main.mod.info = Start.gui.modInfo.info;
					Start.main.mod.name = Start.gui.modInfo.name;
				}
				OpenModInfo.done = true;
				this.dispose();
			}

		});
		layout.putConstraint(SpringLayout.SOUTH, doneButton,-20,SpringLayout.SOUTH, this.getContentPane());
		layout.putConstraint(SpringLayout.EAST, doneButton,-20,SpringLayout.EAST, this.getContentPane());
		JCheckBox exportSource = new JCheckBox("Export Source", this.exportSource);
		this.add(exportSource);
		exportSource.setBorderPainted(true);
		exportSource.setMultiClickThreshhold((long)0.25);
		exportSource.addChangeListener(new ChangeListener(){

			@Override
			public void stateChanged(ChangeEvent e) {
				Start.gui.modInfo.exportSource = !Start.gui.modInfo.exportSource;
			}

		});
		layout.putConstraint(SpringLayout.NORTH, exportSource,20,SpringLayout.NORTH, this.getContentPane());
		layout.putConstraint(SpringLayout.EAST, exportSource,-20,SpringLayout.EAST, this.getContentPane());
		Gui.stardardLookAndFeel(this);

		this.setSize(500, 375);
		this.setLocationRelativeTo(null);
		//5. Show it.
		this.setVisible(true);
	}
	private class InfoCaretListener implements CaretListener{
		int id;
		public InfoCaretListener(int i){
			id = i;
		}
		@Override
		public void caretUpdate(CaretEvent e) {
			if(id == 1){
				Start.gui.modInfo.name = ((JTextField)e.getSource()).getText();
			}
			else if(id == 2){
				Start.gui.modInfo.info = ((JTextField)e.getSource()).getText();
			}
			else{
				Start.gui.modInfo.by = ((JTextField)e.getSource()).getText();
			}
		}

	}
	public JToolBar generateTextBarWithLable(String textInBox, String lable, int lenght, int id){
		JToolBar textBar = new JToolBar();
		textBar.setFloatable(false);
		JLabel jLable = new JLabel(lable);
		textBar.add(jLable);
		JTextField textFeild = new JTextField(textInBox, lenght);
		textFeild.addCaretListener(new InfoCaretListener(id));
		textBar.add(textFeild);
		return textBar;
	}
}
