package modmaker.export;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import modmaker.Item;
import modmaker.Mod;
import modmaker.Recipy;

public class Export {
	public void export(Mod mod, File file){
		try{
			File modDirecotry = new File(file.getAbsolutePath() + "/" + mod.name.toLowerCase() + "/");
			modDirecotry.mkdirs();
			File itemDirecotry = new File(modDirecotry.getAbsolutePath() + "/items/");
			itemDirecotry.mkdir();
			for(Item item : mod.items){
				File itemfile = new File(itemDirecotry.getAbsolutePath() + "/Item" + item.getName() + ".java");
				Integer i = 2;
				while(itemfile.exists()){
					itemfile = new File(itemDirecotry.getAbsolutePath() + "/Item" + item.getName() + i.toString() + ".java");
					i++;
				}
				BufferedWriter writer = new BufferedWriter(new FileWriter(itemfile.getAbsolutePath()));
				StringBuilder builder = new StringBuilder();
				builder.append("package " + mod.name.toLowerCase() + ".items;");
				builder.append("\nimport net.minecraft.client.renderer.texture.IconRegister;\nimport net.minecraft.item.Item;")
				builder.append(item.getName() + "\n");
				builder.append(item.getId().toString() + "\n");
				builder.append("Recipy:" + "\n");
				for(Recipy recipy : item.recipies){
					builder.append("     " + recipy.recipy + "\n");
				}
				writer.write(builder.toString());
				writer.close();
			}
			ZipOutputStream out = new ZipOutputStream(new FileOutputStream(file.getAbsolutePath() + ".zip"));
			for(File f : new File(file.getAbsolutePath()).listFiles()){
				if(f.isDirectory()){
					this.writeSub(file.getAbsolutePath(), f, out);
				}
				else{
					FileInputStream in = new FileInputStream(f);


					out.putNextEntry(new ZipEntry(f.getAbsolutePath().replace(file.getAbsolutePath(), ""))); 

					byte[] b = new byte[1024];
					int count;

					while ((count = in.read(b)) > 0) {
						out.write(b, 0, count);
					}
					in.close();
				}
			}
			FileUtils.removeDirectory(modDirecotry);
			out.close();
		}
		catch(Exception e){e.printStackTrace();}
	}
	private void writeSub(String orginalFilePath, File file , ZipOutputStream out) throws Exception{
		for(File f : file.listFiles()){
			if(f.isDirectory()){
				this.writeSub(orginalFilePath, f, out);
			}
			else{
				FileInputStream in = new FileInputStream(f);


				// name the file inside the zip  file 
				out.putNextEntry(new ZipEntry(f.getAbsolutePath().replace(orginalFilePath, ""))); 

				// buffer size
				byte[] b = new byte[1024];
				int count;

				while ((count = in.read(b)) > 0) {
					out.write(b, 0, count);
				}
				in.close();
			}
		}
	}
}
